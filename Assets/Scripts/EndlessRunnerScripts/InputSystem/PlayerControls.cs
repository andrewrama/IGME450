//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/EndlessRunnerScripts/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""0e4b56fe-aa22-4a4e-a5a3-01d6305f80d4"",
            ""actions"": [
                {
                    ""name"": ""Move Left"",
                    ""type"": ""Button"",
                    ""id"": ""f41e5205-5e7f-4aee-8adc-a8089fef6821"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Right"",
                    ""type"": ""Button"",
                    ""id"": ""04376d1b-dc7c-4c30-a275-74dc64a5518f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80d90c02-7a5a-45ec-83e1-8d67635b02c4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""290b4f4b-fbcd-403e-ba44-e1845b54f841"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Swipe"",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""182a8a54-da72-4fbe-a8ef-313ed0117723"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press(pressPoint=1.401298E-45,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dev Tools"",
            ""id"": ""058c66b2-6f86-47f0-9a5c-7db4a555dafd"",
            ""actions"": [
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""0e8354a0-52b6-4444-9199-7e630b3b2ac9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give Currency"",
                    ""type"": ""Button"",
                    ""id"": ""5e88764c-ff74-4623-b483-647fb912f345"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16040727-260d-4219-bdba-2f7c0b27f044"",
                    ""path"": ""<Keyboard>/#(R)"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c83e9af9-cf31-4262-a421-734b20bb27d3"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Give Currency"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Swipe"",
            ""bindingGroup"": ""Swipe"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_MoveLeft = m_PlayerMovement.FindAction("Move Left", throwIfNotFound: true);
        m_PlayerMovement_MoveRight = m_PlayerMovement.FindAction("Move Right", throwIfNotFound: true);
        // Dev Tools
        m_DevTools = asset.FindActionMap("Dev Tools", throwIfNotFound: true);
        m_DevTools_Reset = m_DevTools.FindAction("Reset", throwIfNotFound: true);
        m_DevTools_GiveCurrency = m_DevTools.FindAction("Give Currency", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_MoveLeft;
    private readonly InputAction m_PlayerMovement_MoveRight;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_PlayerMovement_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PlayerMovement_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @MoveLeft.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveRight;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Dev Tools
    private readonly InputActionMap m_DevTools;
    private IDevToolsActions m_DevToolsActionsCallbackInterface;
    private readonly InputAction m_DevTools_Reset;
    private readonly InputAction m_DevTools_GiveCurrency;
    public struct DevToolsActions
    {
        private @PlayerControls m_Wrapper;
        public DevToolsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reset => m_Wrapper.m_DevTools_Reset;
        public InputAction @GiveCurrency => m_Wrapper.m_DevTools_GiveCurrency;
        public InputActionMap Get() { return m_Wrapper.m_DevTools; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevToolsActions set) { return set.Get(); }
        public void SetCallbacks(IDevToolsActions instance)
        {
            if (m_Wrapper.m_DevToolsActionsCallbackInterface != null)
            {
                @Reset.started -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnReset;
                @GiveCurrency.started -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnGiveCurrency;
                @GiveCurrency.performed -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnGiveCurrency;
                @GiveCurrency.canceled -= m_Wrapper.m_DevToolsActionsCallbackInterface.OnGiveCurrency;
            }
            m_Wrapper.m_DevToolsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @GiveCurrency.started += instance.OnGiveCurrency;
                @GiveCurrency.performed += instance.OnGiveCurrency;
                @GiveCurrency.canceled += instance.OnGiveCurrency;
            }
        }
    }
    public DevToolsActions @DevTools => new DevToolsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_SwipeSchemeIndex = -1;
    public InputControlScheme SwipeScheme
    {
        get
        {
            if (m_SwipeSchemeIndex == -1) m_SwipeSchemeIndex = asset.FindControlSchemeIndex("Swipe");
            return asset.controlSchemes[m_SwipeSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
    public interface IDevToolsActions
    {
        void OnReset(InputAction.CallbackContext context);
        void OnGiveCurrency(InputAction.CallbackContext context);
    }
}
